name: Elixir CI

on:
  push:
    branches: [ "bp/initial-setup" ]
  pull_request:
    branches: [ "bp/initial-setup" ]

permissions:
  contents: read

jobs:
  build:

    name: Build and test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: helium_config_service_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      MIX_ENV: test
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Update PATH for Rust and Protoc tools
      run: echo "${HOME}/.cargo/bin:${HOME}/.mix/escripts" >> $GITHUB_PATH

    - name: Update OS Packages
      run: sudo apt update

    - name: Install Deps for Rust and Protoc
      run: sudo apt-get install -y -q build-essential bison flex git gzip autotools-dev automake libtool pkg-config cmake libsodium-dev iproute2 protobuf-compiler

    - name: Install rust
      run: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable

    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: '1.13.4' # Define the elixir version [required]
        otp-version: '24.1' # Define the OTP version [required]

    - name: Install Rebar
      run: mix local.rebar --force

    - name: Install Hex
      run: mix local.hex --force

    - name: Install Elixir Protobuf plugin
      run: mix escript.install --force hex protobuf

    - name: Checkout
      uses: actions/checkout@v3

    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get

    - name: Run tests
      run: mix test

    - name: Credo
      run: mix credo --strict --no-color

      # Don't cache PLTs based on mix.lock hash, as Dialyzer can
      # incrementally update even old ones Cache key based on Elixir &
      # Erlang version (also useful when running in matrix)
    - name: Restore PLT cache
      uses: actions/cache@v2
      id: plt_cache
      with:
        key: |
          ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
        restore-keys: |
          ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
        path: |
          priv/plts

      # Create PLTs if no cache was found
    - name: Create PLTs
      if: steps.plt_cache.outputs.cache-hit != 'true'
      run: mix dialyzer --plt

    - name: Run dialyzer
      run: mix dialyzer --format github
